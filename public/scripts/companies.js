var Company = React.createClass({
  rawMarkup: function(str) {
    var md = new Remarkable();
    var rawMarkup = md.render(str);
    return { __html: rawMarkup };
  },

  render: function() {
    var c = this.props.company
    return (
      <div className="company">
        <h4 className="companySummary"> {c.name} </h4>
        <span dangerouslySetInnerHTML={this.rawMarkup(c.desc.toString())} />
        <table><tbody>
          <tr><th>Industry</th><td>{c.industries}</td></tr>
          <tr><th>Website</th><td>{c.website}</td></tr>
          <tr><th>Founding</th><td>{c.foundDate}</td></tr>
          <tr><th>Website</th><td>{c.website}</td></tr>
          <tr><th>Stock</th><td>{c.stockCode}</td></tr>
          <tr><th>About</th><td>{c.desc}</td></tr>
        </tbody></table>
      </div>
    );
  }
});

var CompanyBox = React.createClass({
  loadDataFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleCommentSubmit: function(comment) {
    var comments = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    comment.id = Date.now();
    var newComments = comments.concat([comment]);
    this.setState({data: newComments});
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: comment,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: comments});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleChange: function (event) {
    console.log("handleChange called")
    // this.setState({newTodo: event.target.value});
  },
  handleNewTodoKeyDown: function (event) {
    console.log("handleNewTodoKeyDown called")
    // this.setState({newTodo: event.target.value});
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadDataFromServer();
    // setInterval(this.loadDataFromServer, this.props.pollInterval);
  },
  render: function() {
    return (
      <div className="companyBox">
        <h1>Companies</h1>
        <input
          className="searchBox"
          placeholder="Placeholder"
          value="Search company.."
          onKeyDown={this.handleNewTodoKeyDown}
          onChange={this.handleChange}
          autoFocus={true}
        />
        <CompanyList data={this.state.data} />
      </div>
    );
  }
});

var CompanyList = React.createClass({
  render: function() {
    console.log("Rendering: " + this.props.data)
    var commentNodes = this.props.data.map(function(company) {
      return (
        <Company key={company.id} company={company}/>
      );
    });

    return (
      <div className="companyList">
        {commentNodes}
      </div>
    );
  }
});


ReactDOM.render(
  <CompanyBox url="http://localhost:8080/companies" pollInterval={2000} />,
  document.getElementById('content')
);
